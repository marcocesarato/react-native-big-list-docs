"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[704],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),d=a,b=p["".concat(s,".").concat(d)]||p[d]||m[d]||i;return n?r.createElement(b,o(o({ref:t},u),{},{components:n})):r.createElement(b,o({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2406:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return p}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],l={sidebar_position:2},s="Columns list",c={unversionedId:"basics/columns-list",id:"basics/columns-list",title:"Columns list",description:"Like the standard list, the prop data is required. You just need to specify the number of columns using the prop numColumns that will format the list in column format by placing the elements side by side with x elements per x number of columns per row.",source:"@site/docs/basics/columns-list.md",sourceDirName:"basics",slug:"/basics/columns-list",permalink:"/react-native-big-list-docs/basics/columns-list",editUrl:"https://github.com/marcocesarato/react-native-big-list/edit/master/docs/docs/basics/columns-list.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Standard list",permalink:"/react-native-big-list-docs/basics/standard-list"},next:{title:"Sections List",permalink:"/react-native-big-list-docs/basics/sections-list"}},u=[{value:"Props",id:"props",children:[{value:"<code>numColumns</code>",id:"numcolumns",children:[],level:4}],level:3},{value:"Example",id:"example",children:[],level:2}],m={toc:u};function p(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"columns-list"},"Columns list"),(0,i.kt)("p",null,"Like the ",(0,i.kt)("a",{parentName:"p",href:"/react-native-big-list-docs/basics/standard-list"},"standard list"),", the prop ",(0,i.kt)("inlineCode",{parentName:"p"},"data")," is required. You just need to specify the number of columns using the prop ",(0,i.kt)("inlineCode",{parentName:"p"},"numColumns")," that will format the list in column format by placing the elements side by side with x elements per x number of columns per row."),(0,i.kt)("h3",{id:"props"},"Props"),(0,i.kt)("h4",{id:"numcolumns"},(0,i.kt)("inlineCode",{parentName:"h4"},"numColumns")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Required"),(0,i.kt)("th",{parentName:"tr",align:null},"Default"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"number"),(0,i.kt)("td",{parentName:"tr",align:null},"No"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"1"))))),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Here and example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'import BigList from "react-native-big-list";\n\n/* ... */\n\nconst data = [\n  { label: "1", value: 1 /* ... */ },\n  { label: "2", value: 2 /* ... */ },\n  { label: "3", value: 3 /* ... */ },\n  { label: "4", value: 4 /* ... */ },\n  { label: "5", value: 5 /* ... */ },\n  /* ... */\n];\n\nconst renderItem = ({ item, index }) => (\n  <MyListItem label={item.label} value={item.value} />\n);\nconst renderEmpty = () => <MyEmpty />;\nconst renderHeader = () => <MyHeader />;\nconst renderFooter = () => <MyFooter />;\n\nreturn (\n  <BigList\n    data={data}\n    numColumns={5} // Set the number of columns\n    renderItem={renderItem}\n    renderEmpty={renderEmpty}\n    renderHeader={renderHeader}\n    renderFooter={renderFooter}\n    itemHeight={50}\n    headerHeight={90}\n    footerHeight={100}\n  />\n);\n')))}p.isMDXComponent=!0}}]);